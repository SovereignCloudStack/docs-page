"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4342],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(k,i(i({ref:t},d),{},{components:n})):r.createElement(k,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i="Custom CA",c={unversionedId:"container/components/k8s-cluster-api-provider/doc/usage/custom-ca",id:"container/components/k8s-cluster-api-provider/doc/usage/custom-ca",title:"Custom CA",description:"OpenStack provides public-facing API endpoints which protection by SSL/TLS certificates",source:"@site/docs/03-container/components/k8s-cluster-api-provider/doc/usage/custom-ca.md",sourceDirName:"03-container/components/k8s-cluster-api-provider/doc/usage",slug:"/container/components/k8s-cluster-api-provider/doc/usage/custom-ca",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/usage/custom-ca",draft:!1,editUrl:"https://github.com/SovereignCloudStack/docs-page/tree/main/docs/03-container/components/k8s-cluster-api-provider/doc/usage/custom-ca.md",tags:[],version:"current",frontMatter:{}},l={},s=[{value:"Rotation",id:"rotation",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-ca"},"Custom CA"),(0,a.kt)("p",null,"OpenStack provides public-facing API endpoints which protection by SSL/TLS certificates\nis highly recommended in production environments.\nThese certificates are usually issued by public CA but also the custom or private CA could be used."),(0,a.kt)("p",null,"If the communication with OpenStack API is protected by the certificate issued by custom CA\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"cacert")," setting needs to be provided inside clouds.yaml, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"clouds:\n  devstack:\n    cacert: ca-bundle.pem\n    auth:\n      auth_url: https://10.0.3.15/identity\n      project_domain_id: default\n      project_name: demo\n      user_domain_id: default\n    identity_api_version: 3\n    region_name: RegionOne\n    interface: public\n")),(0,a.kt)("p",null,"Here the file ",(0,a.kt)("inlineCode",{parentName:"p"},"ca-bundle.pem")," contains custom root CA and potentially intermediate CA(s)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ca-bundle.pem")," file will be copied to the management server and used by CAPO\nin the management cluster. Also, it will be copied to the workload cluster (control plane and worker nodes)\nand mounted and used by OCCM and CCSI pods.\nSo provide only the necessary certificates in that file.")),(0,a.kt)("p",null,"Steps of what happens with the custom cacert in k8s-cluster-api-provider:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cacert")," setting is provided inside clouds.yaml"),(0,a.kt)("li",{parentName:"ol"},"Cacert file referenced by ",(0,a.kt)("inlineCode",{parentName:"li"},"cacert")," key (1.) is copied to the management server\ndirectory ",(0,a.kt)("inlineCode",{parentName:"li"},"~/cluster-defaults/${cloud_provider}-cacert")," by Terraform"),(0,a.kt)("li",{parentName:"ol"},"During the management server bootstrap process cacert is injected to\nthe ",(0,a.kt)("em",{parentName:"li"},"~/cluster-defaults/cluster-template.yaml")," to ",(0,a.kt)("em",{parentName:"li"},"KubeadmControlPlane")," and ",(0,a.kt)("em",{parentName:"li"},"KubeadmConfigTemplate")," files\nas file with cacert content from already defined secret ",(0,a.kt)("em",{parentName:"li"},"${CLUSTER_NAME}-cloud-config")," and will be later\ntemplated and copied to the workload cluster (control plane and worker nodes) provisioned by CAPO, e.g.:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'files:\n- contentFrom:\n    secret:\n      key: cacert\n      name: ${CLUSTER_NAME}-cloud-config\n  owner: root:root\n  path: /etc/ssl/certs/devstack-cacert\n  permissions: "0644"\n'))),(0,a.kt)("li",{parentName:"ol"},"When the creation of the workload cluster (",(0,a.kt)("em",{parentName:"li"},"create_cluster.sh"),") starts,\n",(0,a.kt)("em",{parentName:"li"},"~/cluster-defaults/cluster-template.yaml")," is copied into workload cluster directory (",(0,a.kt)("em",{parentName:"li"},"~/$CLUSTER_NAME/"),")"),(0,a.kt)("li",{parentName:"ol"},"Then the cacert file content is base64 encoded and saved in OPENSTACK_CLOUD_CACERT_B64 variable\ninside ",(0,a.kt)("em",{parentName:"li"},"~/$CLUSTER_NAME/clusterctl.yaml"),", so it can be used during\nthe workload cluster templating"),(0,a.kt)("li",{parentName:"ol"},"Later, when the workload cluster templates are applied to the management cluster,\nsecret ",(0,a.kt)("em",{parentName:"li"},"${CLUSTER_NAME}-cloud-config")," with base64 encoded cacert is created and used by CAPO"),(0,a.kt)("li",{parentName:"ol"},"CAPO will create workload cluster (thanks to steps 5. and 6.) and cacert is\ntransferred to the control plane and worker nodes (thanks to steps 3. and 4.)"),(0,a.kt)("li",{parentName:"ol"},"OCCM and CCSI pods mount cacert via hostPath volume\nand use it for e.g. creating load balancers or volumes")),(0,a.kt)("h2",{id:"rotation"},"Rotation"),(0,a.kt)("p",null,"When the custom CA expires or otherwise changes it needs to be rotated.\nCAPO uses the custom CA certificate in the management cluster for creating the infrastructure\nfor the workload clusters and in the workload clusters by OCCM and CCSI for e.g. creating load balancers or volumes.\nIn both cases, cacert is provided via secret ",(0,a.kt)("em",{parentName:"p"},"${CLUSTER_NAME}-cloud-config")," and needs to be updated."),(0,a.kt)("p",null,"There are 3 steps in this rotation process:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Replace/append custom CA certificate in ",(0,a.kt)("inlineCode",{parentName:"li"},"~/cluster-defaults/${cloud_provider}-cacert")),(0,a.kt)("li",{parentName:"ol"},"Increase generation counters ",(0,a.kt)("inlineCode",{parentName:"li"},"CONTROL_PLANE_MACHINE_GEN")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"WORKER_MACHINE_GEN")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"~/$CLUSTER_NAME/clusterctl.yaml")),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"create_cluster.sh $CLUSTER_NAME")," and wait for the rolling update of your workload cluster")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In step 1, appending can be useful for avoiding downtime of your services.\nYour cacert file will contain two CA certificates - old and new.\nThis should help with a smooth transition to a new certificate and later, the old one can be removed.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Steps 2 and 3 need to be done per workload cluster.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When step 2 is omitted, only cacert secret in the management cluster is updated and no rolling update of\nthe workload cluster in step 3 is started and existing nodes remain with the old certificate.")))}p.isMDXComponent=!0}}]);