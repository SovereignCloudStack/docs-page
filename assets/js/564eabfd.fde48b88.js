"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9468],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(b,s(s({ref:t},c),{},{components:n})):r.createElement(b,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},s="Harbor",i={unversionedId:"container/components/k8s-cluster-api-provider/doc/usage/harbor",id:"container/components/k8s-cluster-api-provider/doc/usage/harbor",title:"Harbor",description:"Project k8s-harbor is used for the SCS Harbor",source:"@site/docs/03-container/components/k8s-cluster-api-provider/doc/usage/harbor.md",sourceDirName:"03-container/components/k8s-cluster-api-provider/doc/usage",slug:"/container/components/k8s-cluster-api-provider/doc/usage/harbor",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/usage/harbor",draft:!1,editUrl:"https://github.com/SovereignCloudStack/docs-page/tree/main/docs/03-container/components/k8s-cluster-api-provider/doc/usage/harbor.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Default deployment",id:"default-deployment",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"Persistence",id:"persistence",level:3},{value:"Ingress and TLS",id:"ingress-and-tls",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"harbor"},"Harbor"),(0,a.kt)("p",null,"Project ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SovereignCloudStack/k8s-harbor"},"k8s-harbor")," is used for the SCS Harbor\ncontainer registry deployment ",(0,a.kt)("a",{parentName:"p",href:"https://registry.scs.community/"},"https://registry.scs.community/"),"."),(0,a.kt)("p",null,"With this project, it is possible to deploy Harbor in a similar way into the workload cluster.\nIf you want to deploy Harbor, set terraform variable ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy_harbor = true"),". It will deploy\nHarbor with ",(0,a.kt)("a",{parentName:"p",href:"#default-deployment"},"default options"),". The recommended approach is to\nset up also ",(0,a.kt)("a",{parentName:"p",href:"#persistence"},"persistence")," and ",(0,a.kt)("a",{parentName:"p",href:"#ingress-and-tls"},"ingress with tls"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"It automatically deploys flux as k8s-harbor requirement.\nIt also expects that the Swift object store is available in the targeting OpenStack project. S3 credentials\n(",(0,a.kt)("inlineCode",{parentName:"p"},"openstack ec2 credentials create"),") are created and saved into ",(0,a.kt)("em",{parentName:"p"},"~/$CLUSTER_NAME/deployed-manifests.d/harbor/.ec2"),".\nBucket (",(0,a.kt)("inlineCode",{parentName:"p"},'openstack container create "$PREFIX-$CLUSTER_NAME-harbor-registry"'),") for storing container images\nis also automatically created in the openstack Swift object store.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Warning: Swift container and ec2 credentials are not removed when the workload cluster is deleted.")),(0,a.kt)("h2",{id:"default-deployment"},"Default deployment"),(0,a.kt)("p",null,"By default, Harbor will be deployed with these options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terraform"},'harbor_config = {\n  domain_name: "",\n  issuer_email: "",\n  persistence: false,\n  database_size: "1Gi",\n  redis_size: "1Gi",\n  trivy_size: "5Gi"\n}\n')),(0,a.kt)("p",null,"These options are templated to the mgmt server and used as environment variables\nduring the creation of the workload cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat ~/cluster-defaults/harbor-settings\nDEPLOY_HARBOR=true\nHARBOR_DATABASE_SIZE=1Gi\nHARBOR_DOMAIN_NAME=\nHARBOR_ISSUER_EMAIL=\nHARBOR_PERSISTENCE=false\nHARBOR_REDIS_SIZE=1Gi\nHARBOR_TRIVY_SIZE=5G\n")),(0,a.kt)("p",null,"When the Harbor is deployed, you can check the status, e.g. by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ flux get helmrelease -n default\nNAME    REVISION        SUSPENDED       READY   MESSAGE                          \nharbor  1.12.3          False           True    Release reconciliation succeeded\n")),(0,a.kt)("p",null,"or you can simply check if pods are running by ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get pods"),"."),(0,a.kt)("p",null,"Harbor components are deployed as deployments and statefulsets:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get deploy,sts\nNAME                                READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/harbor-core         2/2     2            2           11m\ndeployment.apps/harbor-exporter     1/1     1            1           11m\ndeployment.apps/harbor-jobservice   2/2     2            2           11m\ndeployment.apps/harbor-nginx        1/1     1            1           11m\ndeployment.apps/harbor-portal       2/2     2            2           11m\ndeployment.apps/harbor-registry     2/2     2            2           11m\n\nNAME                               READY   AGE\nstatefulset.apps/harbor-database   1/1     11m\nstatefulset.apps/harbor-redis      1/1     11m\nstatefulset.apps/harbor-trivy      2/2     11m\n")),(0,a.kt)("p",null,"Default options deploy Harbor as clusterIP service without pvc persistence for database, redis and trivy.\nSee ",(0,a.kt)("inlineCode",{parentName:"p"},"terraform/files/kubernetes-manifests.d/harbor/envs/clusterIP/")," for further details.\nYou can access it via the k8s service ",(0,a.kt)("inlineCode",{parentName:"p"},"harbor"),", for example, ",(0,a.kt)("em",{parentName:"p"},"port-forward")," it and access it at http://localhost:8080:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get svc harbor -o wide\nNAME     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE   SELECTOR\nharbor   ClusterIP   10.109.57.148   <none>        80/TCP    11m   app=harbor,component=nginx,release=harbor\n$ kubectl port-forward svc/harbor 8080:80\nForwarding from 127.0.0.1:8080 -> 8080\nForwarding from [::1]:8080 -> 8080\n")),(0,a.kt)("p",null,"Admin username is ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," and password can be obtained from the secret by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret harbor-secrets -o jsonpath='{.data.values\\.yaml}' | base64 -d | yq .harborAdminPassword\n")),(0,a.kt)("h2",{id:"configuration-options"},"Configuration options"),(0,a.kt)("h3",{id:"persistence"},"Persistence"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"persistence")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nWhen persistence is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"harbor_config = {persistence: true}"),",\nHarbor components (database, redis, trivy) are deployed with PVCs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get pvc\nNAME                              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS     AGE\ndata-harbor-redis-0               Bound    pvc-982221c1-64cb-4d3e-a77d-1db5b4429a69   1Gi        RWO            cinder-default   6m12s\ndata-harbor-trivy-0               Bound    pvc-8a2ad60c-c7bf-40e1-8593-0d00b3d40b4f   5Gi        RWO            cinder-default   6m12s\ndata-harbor-trivy-1               Bound    pvc-734f9b6a-9cee-40e4-9e1c-b959d9f7b7cf   5Gi        RWO            cinder-default   5m11s\ndatabase-data-harbor-database-0   Bound    pvc-c5c3a7e6-a99a-4f16-a5cc-792e9b3665d8   1Gi        RWO            cinder-default   6m12s\n")),(0,a.kt)("p",null,"The size of PVCs can be configured by ",(0,a.kt)("inlineCode",{parentName:"p"},'harbor_config = {<component>_size: "size"}'),".\nTrivy has 2 replicas, i.e. 2 PVCs will be created."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When persistence is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,a.kt)("em",{parentName:"p"},"Cinder CSI")," is automatically deployed.")),(0,a.kt)("h3",{id:"ingress-and-tls"},"Ingress and TLS"),(0,a.kt)("p",null,"If you want to deploy ingress in front of Harbor and secure it with SSL/TLS certificate, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"domain_name")," option.\nRelevant files which will be deployed are located in ",(0,a.kt)("inlineCode",{parentName:"p"},"terraform/files/kubernetes-manifests.d/harbor/envs/ingress/"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When ",(0,a.kt)("inlineCode",{parentName:"p"},"domain_name")," is set, ",(0,a.kt)("inlineCode",{parentName:"p"},"cert-manager")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ingress-nginx")," are automatically deployed.")),(0,a.kt)("p",null,"So, instead of default ",(0,a.kt)("em",{parentName:"p"},"harbor")," clusterIP service and ",(0,a.kt)("em",{parentName:"p"},"harbor-nginx")," deployment, ",(0,a.kt)("inlineCode",{parentName:"p"},"harbor-ingress")," will be deployed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get ing harbor-ingress\nNAME             CLASS   HOSTS                    ADDRESS                  PORTS     AGE\nharbor-ingress   nginx   harbor.example.com       213.131.230.203.nip.io   80, 443   13m\n")),(0,a.kt)("p",null,"There will be also an additional cert-manager ",(0,a.kt)("em",{parentName:"p"},"issuer")," ",(0,a.kt)("inlineCode",{parentName:"p"},"letsencrypt")," deployed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get issuers -o wide\nNAME          READY   STATUS                                                 AGE\nletsencrypt   True    The ACME account was registered with the ACME server   13m\n")),(0,a.kt)("p",null,"This ACME issuer has an optional email field, which can be set by ",(0,a.kt)("inlineCode",{parentName:"p"},"issuer_email")," option.\nThis is recommended option because it will be used to contact you in case of issues with your account or certificates,\nincluding expiry notification emails."),(0,a.kt)("p",null,"Then, the settings can look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terraform"},'harbor_config = {\n  domain_name: "harbor.example.com",\n  issuer_email: "email@example.com",\n}\n')),(0,a.kt)("p",null,"After the deployment, there is one mandatory step to set up proper TLS communication with this Harbor instance.\n",(0,a.kt)("inlineCode",{parentName:"p"},"harbor-ingress")," has special annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"cert-manager.io/issuer: letsencrypt")," which instructs cert-manager\nto create a certificate object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get cert -o wide\nNAME         READY   SECRET       ISSUER        STATUS                                         AGE\nharbor-crt   False   harbor-crt   letsencrypt   Issuing certificate as Secret does not exist   13m\n")),(0,a.kt)("p",null,"The certificate is not ready, because it uses Let\u2019s Encrypt standard ACME HTTP-01 challenge.\nIn this challenge, you need to take the IP address of the ingress load balancer and create a DNS record\nfor your ",(0,a.kt)("inlineCode",{parentName:"p"},"domain_name"),". You can get an IP address (don't look on ",(0,a.kt)("em",{parentName:"p"},"nip.io")," suffix) e.g. by this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath=\'{.status.loadBalancer.ingress}\'\n[{"hostname":"213.131.230.203.nip.io"}]\n')),(0,a.kt)("p",null,"And after a while, your cert is ready, and you can access harbor at ",(0,a.kt)("a",{parentName:"p",href:"https://harbor.example.com/"},"https://harbor.example.com/"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get cert -o wide\nNAME         READY   SECRET       ISSUER        STATUS                                          AGE\nharbor-crt   True    harbor-crt   letsencrypt   Certificate is up to date and has not expired   18m\n")))}d.isMDXComponent=!0}}]);