"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2907:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Exposition of IaaS metering data as JSON",type:"Standard",status:"Draft",track:"IaaS"},i=void 0,s={unversionedId:"active/scs-0412-v1-metering-json",id:"active/scs-0412-v1-metering-json",title:"Exposition of IaaS metering data as JSON",description:"Introduction",source:"@site/standards/active/scs-0412-v1-metering-json.md",sourceDirName:"active",slug:"/active/scs-0412-v1-metering-json",permalink:"/standards/active/scs-0412-v1-metering-json",draft:!1,tags:[],version:"current",frontMatter:{title:"Exposition of IaaS metering data as JSON",type:"Standard",status:"Draft",track:"IaaS"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Options considered",id:"options-considered",level:3},{value:"Use Ceilometer HTTP hook format",id:"use-ceilometer-http-hook-format",level:4},{value:"Use another format",id:"use-another-format",level:4},{value:"Open questions",id:"open-questions",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Conformance Tests",id:"conformance-tests",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The Sovereign Cloud Stack project intends to standardise an infrastructure-as-a-service (IaaS) layer.\nIn order to economically sustainably run a cloud,\nit is generally useful to know which user or tenant consumes which amount of resources in which time frame."),(0,o.kt)("p",null,"Similarly to how the SCS provides an interface for connecting monitoring services to detect outages,\nthis standard aims for providing an interface for connecting systems which aggregate customer resource usage."),(0,o.kt)("h2",{id:"motivation"},"Motivation"),(0,o.kt)("p",null,"In general,\nusers of the SCS (i.e. cloud operators) may already have different systems in place\nfor tracking customer relationships\nas well as billing."),(0,o.kt)("p",null,"Those systems are unlikely to have a uniform interface across all possible implementations.\nLikewise, those systems are unlikely to have a way to interface with OpenStack,\nthe reference IaaS layer in SCS."),(0,o.kt)("p",null,"In order to provide SCS operators with a way to integrate the SCS IaaS layer with their billing,\nthis document shall provide a standard format,\nupon which shim conversion layers (to whichever billing system is in place)\ncan be built."),(0,o.kt)("h2",{id:"design-considerations"},"Design Considerations"),(0,o.kt)("p",null,"In order to define a standard,\nthe various options for formats need to be considered.\nHowever, all formats also come with different implementation costs."),(0,o.kt)("p",null,"These aspects are weighed in this section."),(0,o.kt)("h3",{id:"options-considered"},"Options considered"),(0,o.kt)("h4",{id:"use-ceilometer-http-hook-format"},"Use Ceilometer HTTP hook format"),(0,o.kt)("p",null,"The OpenStack Ceilometer project,\nwhich serves as a hub for all things telemetry and metering,\nprovides an HTTP-based hook to extract metering data.\nThis hook receives JSON-formatted data."),(0,o.kt)("p",null,"Using this data has the advantage\nthat we do not need to implement another component to translate the format\nwhich may in turn be a point of failure."),(0,o.kt)("h4",{id:"use-another-format"},"Use another format"),(0,o.kt)("p",null,"In this option,\na format for metering data is researched and reused, or defined and specified by the SCS project."),(0,o.kt)("p",null,"This option was not explored deeply, for the reasons explained in the decision."),(0,o.kt)("h2",{id:"open-questions"},"Open questions"),(0,o.kt)("p",null,"None."),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"We chose the Ceilometer HTTP hook format, described below, for the following reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Ceilometer is a component which needs to be there anyway for successful metering of OpenStack. Re-using the format makes sense.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using any other format requires a translation layer. However, users will likely need their own translation layer ",(0,o.kt)("em",{parentName:"p"},"anyway"),", to integrate the metering with their own infrastructure. Hence, it makes more sense to expose the data from Ceilometer directly."),(0,o.kt)("p",{parentName:"li"},"A notable downside of this approach is that a change in Ceilometers format will inevitably cause issues in all downstream consumers."))),(0,o.kt)("h2",{id:"related-documents"},"Related Documents"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"SCS-0410-v1"),(0,o.kt)("li",{parentName:"ul"},"SCS-0411-v1")),(0,o.kt)("h2",{id:"conformance-tests"},"Conformance Tests"),(0,o.kt)("p",null,"None."))}u.isMDXComponent=!0}}]);