"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4914],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const a={title:"Push-based approach for providing usage data",type:"Decision Record",status:"Draft",track:"Ops"},r=void 0,s={unversionedId:"active/scs-0411-v1-publishing_method_for_metering_data",id:"active/scs-0411-v1-publishing_method_for_metering_data",title:"Push-based approach for providing usage data",description:"for more info. --\x3e",source:"@site/standards/active/scs-0411-v1-publishing_method_for_metering_data.md",sourceDirName:"active",slug:"/active/scs-0411-v1-publishing_method_for_metering_data",permalink:"/standards/active/scs-0411-v1-publishing_method_for_metering_data",draft:!1,tags:[],version:"current",frontMatter:{title:"Push-based approach for providing usage data",type:"Decision Record",status:"Draft",track:"Ops"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Definitions",id:"definitions",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Options",id:"options",level:3},{value:"Push-based flow",id:"push-based-flow",level:4},{value:"Poll-based flow",id:"poll-based-flow",level:4},{value:"Open questions",id:"open-questions",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Conformance Tests",id:"conformance-tests",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"In the past we noticed missing events in the telemetry stack of OpenStack.\nThis results in situations where the Cloud Service Provider (CSP)\nmay think that a resource is still in use while the owner shut it down,\nor may not be aware of a resource which has been created."),(0,o.kt)("p",null,"Such inaccurate data is a problem,\nwhen it is supposed to be used for billing purposes."),(0,o.kt)("p",null,"This document discusses how such metering data should be made available\nto the cloud service provider\nfor forwarding into their own billing solution."),(0,o.kt)("h2",{id:"definitions"},"Definitions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Push-based flow:\nIn a push-based flow,\nthe system generating data actively sends that data to a consumer.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pull-based flow:\nIn a pull-based flow,\nthe system generating data waits for the system consuming the data\nto ask for that data.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Metering:\nCollection of usage data of a cloud,\nfor the specific purpose of creating invoices\nto bill customers for the resources they have allocated.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Billing:\nThe entire process of creation, management and sending of invoices\ngenerated from metering data."))),(0,o.kt)("h2",{id:"motivation"},"Motivation"),(0,o.kt)("p",null,"Being able to bill users\nfor the resources they use\nis a prerequisite for commercially operating a cloud.\nThe SCS project wants to deliver a cloud stack\nwhich can be used for that purpose,\nhence providing reliable metering data is a requirement."),(0,o.kt)("p",null,"We generally expect that cloud providers already have\nsome kind of customer-relation management or billing system in place.\nHence, it is important that the SCS is not too opinionated\non this implementation detail,\nbut provides a system which can easily interface with other systems."),(0,o.kt)("p",null,"This is similar to how the SCS specified the monitoring stack."),(0,o.kt)("h2",{id:"design-considerations"},"Design Considerations"),(0,o.kt)("p",null,"The following requirements exist for the process for providing metrics to the cloud service provider:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"MUST scale to different timescales:\nWe expect to have metrics which change frequently (e.g. object store usage)\nand metrics which change rarely (e.g. cinder volume sizes).")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("h4",{id:"push-based-flow"},"Push-based flow"),(0,o.kt)("p",null,"In a push-based flow,\nthe to-be-implemented metering system pushes events to the sink\nas soon as it is reasonably confident\nthat the event can be used for billing purposes."),(0,o.kt)("h4",{id:"poll-based-flow"},"Poll-based flow"),(0,o.kt)("p",null,"In the poll-based flow,\nwhichever system the CSP runs would be responsible for polling the metering API\nin a frequency sufficient to capture all data with sufficient granularity."),(0,o.kt)("h2",{id:"open-questions"},"Open questions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"What is necessary to extend the availability of sending to various sinks?"),(0,o.kt)("li",{parentName:"ul"},"How does the configuration look like that is needed to push to a sink from the same type that will be already implemented?")),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"As we need to support very different time scales of data,\nthe push-based flow is more suitable:\nit allows the producer of the data,\nwhich knows about the interval in which it changes,\nwhen to provide new data to the consumer.\nIn contrast to that,\na poll-based flow would need the consumer to know about change intervals,\nor alternatively poll in the highest change frequency ever expected."),(0,o.kt)("h2",{id:"related-documents"},"Related Documents"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"SCS-0410-v1")),(0,o.kt)("h2",{id:"conformance-tests"},"Conformance Tests"),(0,o.kt)("p",null,"None (this is a decision record)."))}d.isMDXComponent=!0}}]);