"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8090],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},d=Object.keys(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),r=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=r(e.components);return a.createElement(o.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},_=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,d=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),_=r(t),c=i,f=_["".concat(o,".").concat(c)]||_[c]||y[c]||d;return t?a.createElement(f,l(l({ref:n},p),{},{components:t})):a.createElement(f,l({ref:n},p))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var d=t.length,l=new Array(d);l[0]=_;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var r=2;r<d;r++)l[r]=t[r];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}_.displayName="MDXCreateElement"},3424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>y,frontMatter:()=>d,metadata:()=>s,toc:()=>r});var a=t(7462),i=(t(7294),t(3905));const d={title:"Metering Configuration",type:null,status:"Draft",track:"Global"},l=void 0,s={unversionedId:"operating-scs/metering/meter-configuration",id:"operating-scs/metering/meter-configuration",title:"Metering Configuration",description:"The Metrics and events we want to use in the metering process can be defined in two ways. The first one is to allow ceilometer to poll distinct metrics and events.",source:"@site/docs/04-operating-scs/07-metering/meter-configuration.md",sourceDirName:"04-operating-scs/07-metering",slug:"/operating-scs/metering/meter-configuration",permalink:"/docs/operating-scs/metering/meter-configuration",draft:!1,editUrl:"https://github.com/SovereignCloudStack/docs-page/tree/main/docs/04-operating-scs/07-metering/meter-configuration.md",tags:[],version:"current",frontMatter:{title:"Metering Configuration",type:null,status:"Draft",track:"Global"},sidebar:"docs",previous:{title:"Metering",permalink:"/docs/category/metering"},next:{title:"Releases",permalink:"/docs/category/releases"}},o={},r=[{value:"1. ceilometer metering configuration",id:"1-ceilometer-metering-configuration",level:2},{value:"1.1 polling.yaml",id:"11-pollingyaml",level:3},{value:"1.2 event_definitions.yaml",id:"12-event_definitionsyaml",level:3},{value:"1.3 event_pipeline.yaml",id:"13-event_pipelineyaml",level:3},{value:"1.4 pipeline.yaml",id:"14-pipelineyaml",level:3}],p={toc:r};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Metrics and events we want to use in the metering process can be defined in two ways. The first one is to allow ceilometer to poll distinct metrics and events.\nThis can be achived by setting up ceilometers config files."),(0,i.kt)("h2",{id:"1-ceilometer-metering-configuration"},"1. ceilometer metering configuration"),(0,i.kt)("p",null,"there is the polling.yaml file that describes what metrics to poll and when. It allows to create multiple sources for the ceilometer pipeline with different metrics and intervals."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.openstack.org/ceilometer/latest/admin/telemetry-data-collection.html#polling"},"ceilometer polling"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.openstack.org/ceilometer/latest/admin/telemetry-measurements.html#telemetry-bare-metal-service"},"ceilometer polling metrics")),(0,i.kt)("h3",{id:"11-pollingyaml"},"1.1 polling.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nsources:\n  - name: billing_source # 'source name'\n    interval: 300 # 'how often the samples should be generated'\n    meters:\n      - \"volume.size\" # 'meter filter'\n      # - \"*\" # 'using all pollsters\n")),(0,i.kt)("p",null,"in the event_definitions file all data structure of events are defined. If a message with a distinct event_type appears, the Fields and values from the message are matched with the Event-object."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.openstack.org/ceilometer/latest/admin/telemetry-events.html"},"ceilometer events"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openstack/ceilometer/blob/master/ceilometer/pipeline/data/event_definitions.yaml"},"ceilometer event_definitions")),(0,i.kt)("h3",{id:"12-event_definitionsyaml"},"1.2 event_definitions.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- event_type: 'compute.instance.*'\n  traits: &instance_traits\n    tenant_id:\n      fields: payload.tenant_id\n    user_id:\n      fields: payload.user_id\n    instance_id:\n      fields: payload.instance_id\n    display_name:\n      fields: payload.display_name\n    resource_id:\n      fields: payload.instance_id\n    cell_name:\n      fields: payload.cell_name\n    host:\n      fields: publisher_id.`split(., 1, 1)`\n    service:\n      fields: publisher_id.`split(., 0, -1)`\n    memory_mb:\n      type: int\n      fields: payload.memory_mb\n    disk_gb:\n      type: int\n      fields: payload.disk_gb\n    root_gb:\n      type: int\n      fields: payload.root_gb\n    ephemeral_gb:\n      type: int\n      fields: payload.ephemeral_gb\n    vcpus:\n      type: int\n      fields: payload.vcpus\n    instance_type_id:\n      fields: payload.instance_type_id\n    instance_type:\n      fields: payload.instance_type\n    state:\n      fields: payload.state\n    os_architecture:\n      fields: payload.image_meta.'org.openstack__1__architecture'\n    os_version:\n      fields: payload.image_meta.'org.openstack__1__os_version'\n    os_distro:\n      fields: payload.image_meta.'org.openstack__1__os_distro'\n    launched_at:\n      type: datetime\n      fields: payload.launched_at\n    deleted_at:\n      type: datetime\n      fields: payload.deleted_at\n- event_type: compute.instance.create.end\n  traits:\n    <<: *instance_traits\n    availability_zone:\n      fields: payload.availability_zone\n- event_type: compute.instance.update\n  traits:\n    <<: *instance_traits\n    old_state:\n      fields: payload.old_state\n- event_type: compute.instance.exists\n  traits:\n    <<: *instance_traits\n    audit_period_beginning:\n      type: datetime\n      fields: payload.audit_period_beginning\n    audit_period_ending:\n      type: datetime\n      fields: payload.audit_period_ending\n- event_type: ['volume.exists', 'volume.retype', 'volume.create.*', 'volume.delete.*', 'volume.resize.*', 'volume.attach.*', 'volume.detach.*', 'volume.update.*', 'snapshot.exists', 'snapshot.create.*', 'snapshot.delete.*', 'snapshot.update.*', 'volume.transfer.accept.end', 'snapshot.transfer.accept.end']\n  traits: &cinder_traits\n    user_id:\n      fields: payload.user_id\n    project_id:\n      fields: payload.tenant_id\n    availability_zone:\n      fields: payload.availability_zone\n    display_name:\n      fields: payload.display_name\n    replication_status:\n      fields: payload.replication_status\n    status:\n      fields: payload.status\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    image_id:\n      fields: payload.glance_metadata[?key=image_id].value\n    instance_id:\n      fields: payload.volume_attachment[0].server_id\n- event_type: ['volume.transfer.*', 'volume.exists', 'volume.retype', 'volume.create.*', 'volume.delete.*', 'volume.resize.*', 'volume.attach.*', 'volume.detach.*', 'volume.update.*', 'snapshot.transfer.accept.end']\n  traits:\n    <<: *cinder_traits\n    resource_id:\n      fields: payload.volume_id\n    host:\n      fields: payload.host\n    size:\n      type: int\n      fields: payload.size\n    type:\n      fields: payload.volume_type\n    replication_status:\n      fields: payload.replication_status\n- event_type: ['snapshot.transfer.accept.end']\n  traits:\n    <<: *cinder_traits\n    resource_id:\n      fields: payload.snapshot_id\n    project_id:\n      fields: payload.tenant_id\n- event_type: ['share.create.*', 'share.delete.*', 'share.extend.*', 'share.shrink.*']\n  traits: &share_traits\n    share_id:\n      fields: payload.share_id\n    user_id:\n      fields: payload.user_id\n    project_id:\n      fields: payload.tenant_id\n    snapshot_id:\n      fields: payload.snapshot_id\n    availability_zone:\n      fields: payload.availability_zone\n    status:\n      fields: payload.status\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    share_group_id:\n      fields: payload.share_group_id\n    size:\n      type: int\n      fields: payload.size\n    name:\n      fields: payload.name\n    proto:\n      fields: payload.proto\n    is_public:\n      fields: payload.is_public\n    description:\n      fields: payload.description\n    host:\n      fields: payload.host\n- event_type: ['snapshot.exists', 'snapshot.create.*', 'snapshot.delete.*', 'snapshot.update.*']\n  traits:\n    <<: *cinder_traits\n    resource_id:\n      fields: payload.snapshot_id\n    volume_id:\n      fields: payload.volume_id\n- event_type: ['image_volume_cache.*']\n  traits:\n    image_id:\n      fields: payload.image_id\n    host:\n      fields: payload.host\n- event_type: ['image.create', 'image.update', 'image.upload', 'image.delete']\n  traits: &glance_crud\n    project_id:\n      fields: payload.owner\n    resource_id:\n      fields: payload.id\n    name:\n      fields: payload.name\n    status:\n      fields: payload.status\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    user_id:\n      fields: payload.owner\n    deleted_at:\n      type: datetime\n      fields: payload.deleted_at\n    size:\n      type: int\n      fields: payload.size\n- event_type: image.send\n  traits: &glance_send\n    receiver_project:\n      fields: payload.receiver_tenant_id\n    receiver_user:\n      fields: payload.receiver_user_id\n    user_id:\n      fields: payload.owner_id\n    image_id:\n      fields: payload.image_id\n    destination_ip:\n      fields: payload.destination_ip\n    bytes_sent:\n      type: int\n      fields: payload.bytes_sent\n- event_type: orchestration.stack.*\n  traits: &orchestration_crud\n    project_id:\n      fields: payload.tenant_id\n    user_id:\n      fields: ['ctxt.trustor_user_id', 'ctxt.user_id']\n    resource_id:\n      fields: payload.stack_identity\n    name:\n      fields: payload.name\n- event_type: sahara.cluster.*\n  traits: &sahara_crud\n    project_id:\n      fields: payload.project_id\n    user_id:\n      fields: ctxt.user_id\n    resource_id:\n      fields: payload.cluster_id\n    name:\n      fields: payload.name\n- event_type: sahara.cluster.health\n  traits: &sahara_health\n    <<: *sahara_crud\n    verification_id:\n      fields: payload.verification_id\n    health_check_status:\n      fields: payload.health_check_status\n    health_check_name:\n      fields: payload.health_check_name\n    health_check_description:\n      fields: payload.health_check_description\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    updated_at:\n      type: datetime\n      fields: payload.updated_at\n- event_type: ['identity.user.*', 'identity.project.*', 'identity.group.*', 'identity.role.*', 'identity.OS-TRUST:trust.*',\n               'identity.region.*', 'identity.service.*', 'identity.endpoint.*', 'identity.policy.*']\n  traits: &identity_crud\n    resource_id:\n      fields: payload.resource_info\n    initiator_id:\n      fields: payload.initiator.id\n    project_id:\n      fields: payload.initiator.project_id\n    domain_id:\n      fields: payload.initiator.domain_id\n- event_type: identity.role_assignment.*\n  traits: &identity_role_assignment\n    role:\n      fields: payload.role\n    group:\n      fields: payload.group\n    domain:\n      fields: payload.domain\n    user:\n      fields: payload.user\n    project:\n      fields: payload.project\n- event_type: identity.authenticate\n  traits: &identity_authenticate\n    typeURI:\n      fields: payload.typeURI\n    id:\n      fields: payload.id\n    action:\n      fields: payload.action\n    eventType:\n      fields: payload.eventType\n    eventTime:\n      type: datetime\n      fields: payload.eventTime\n    outcome:\n      fields: payload.outcome\n    initiator_typeURI:\n      fields: payload.initiator.typeURI\n    initiator_id:\n      fields: payload.initiator.id\n    initiator_name:\n      fields: payload.initiator.name\n    initiator_host_agent:\n      fields: payload.initiator.host.agent\n    initiator_host_addr:\n      fields: payload.initiator.host.address\n    target_typeURI:\n      fields: payload.target.typeURI\n    target_id:\n      fields: payload.target.id\n    observer_typeURI:\n      fields: payload.observer.typeURI\n    observer_id:\n      fields: payload.observer.id\n- event_type: objectstore.http.request\n  traits: &objectstore_request\n    typeURI:\n      fields: payload.typeURI\n    id:\n      fields: payload.id\n    action:\n      fields: payload.action\n    eventType:\n      fields: payload.eventType\n    eventTime:\n      type: datetime\n      fields: payload.eventTime\n    outcome:\n      fields: payload.outcome\n    initiator_typeURI:\n      fields: payload.initiator.typeURI\n    initiator_id:\n      fields: payload.initiator.id\n    initiator_project_id:\n      fields: payload.initiator.project_id\n    target_typeURI:\n      fields: payload.target.typeURI\n    target_id:\n      fields: payload.target.id\n    target_action:\n      fields: payload.target.action\n    target_metadata_path:\n      fields: payload.target.metadata.path\n    target_metadata_version:\n      fields: payload.target.metadata.version\n    target_metadata_container:\n      fields: payload.target.metadata.container\n    target_metadata_object:\n      fields: payload.target.metadata.object\n    observer_id:\n      fields: payload.observer.id\n- event_type: ['network.*', 'subnet.*', 'port.*', 'router.*', 'floatingip.*', 'firewall.*', 'firewall_policy.*', 'firewall_rule.*', 'vpnservice.*', 'ipsecpolicy.*', 'ikepolicy.*', 'ipsec_site_connection.*']\n  traits: &network_traits\n    user_id:\n      fields: ctxt.user_id\n    project_id:\n      fields: ctxt.tenant_id\n- event_type: network.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.network.name\n    resource_id:\n      fields: ['payload.network.id', 'payload.id']\n- event_type: subnet.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.subnet.name\n    resource_id:\n      fields: ['payload.subnet.id', 'payload.id']\n- event_type: port.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.port.name\n    resource_id:\n      fields: ['payload.port.id', 'payload.id']\n- event_type: router.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.router.name\n    resource_id:\n      fields: ['payload.router.id', 'payload.id']\n- event_type: floatingip.*\n  traits:\n    <<: *network_traits\n    resource_id:\n      fields: ['payload.floatingip.id', 'payload.id']\n- event_type: firewall.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.firewall.name\n    resource_id:\n      fields: ['payload.firewall.id', 'payload.id']\n- event_type: firewall_policy.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.firewall_policy.name\n    resource_id:\n      fields: ['payload.firewall_policy.id', 'payload.id']\n- event_type: firewall_rule.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.firewall_rule.name\n    resource_id:\n      fields: ['payload.firewall_rule.id', 'payload.id']\n- event_type: vpnservice.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.vpnservice.name\n    resource_id:\n      fields: ['payload.vpnservice.id', 'payload.id']\n- event_type: ipsecpolicy.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.ipsecpolicy.name\n    resource_id:\n      fields: ['payload.ipsecpolicy.id', 'payload.id']\n- event_type: ikepolicy.*\n  traits:\n    <<: *network_traits\n    name:\n      fields: payload.ikepolicy.name\n    resource_id:\n      fields: ['payload.ikepolicy.id', 'payload.id']\n- event_type: ipsec_site_connection.*\n  traits:\n    <<: *network_traits\n    resource_id:\n      fields: ['payload.ipsec_site_connection.id', 'payload.id']\n- event_type: '*http.*'\n  traits: &http_audit\n    project_id:\n      fields: payload.initiator.project_id\n    user_id:\n      fields: payload.initiator.id\n    typeURI:\n      fields: payload.typeURI\n    eventType:\n      fields: payload.eventType\n    action:\n      fields: payload.action\n    outcome:\n      fields: payload.outcome\n    id:\n      fields: payload.id\n    eventTime:\n      type: datetime\n      fields: payload.eventTime\n    requestPath:\n      fields: payload.requestPath\n    observer_id:\n      fields: payload.observer.id\n    target_id:\n      fields: payload.target.id\n    target_typeURI:\n      fields: payload.target.typeURI\n    target_name:\n      fields: payload.target.name\n    initiator_typeURI:\n      fields: payload.initiator.typeURI\n    initiator_id:\n      fields: payload.initiator.id\n    initiator_name:\n      fields: payload.initiator.name\n    initiator_host_address:\n      fields: payload.initiator.host.address\n- event_type: '*http.response'\n  traits:\n    <<: *http_audit\n    reason_code:\n      fields: payload.reason.reasonCode\n- event_type: ['dns.domain.create', 'dns.domain.update', 'dns.domain.delete']\n  traits: &dns_domain_traits\n    status:\n      fields: payload.status\n    retry:\n      fields: payload.retry\n    description:\n      fields: payload.description\n    expire:\n      fields: payload.expire\n    email:\n      fields: payload.email\n    ttl:\n      fields: payload.ttl\n    action:\n      fields: payload.action\n    name:\n      fields: payload.name\n    resource_id:\n      fields: payload.id\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    updated_at:\n      type: datetime\n      fields: payload.updated_at\n    version:\n      fields: payload.version\n    parent_domain_id:\n      fields: parent_domain_id\n    serial:\n      fields: payload.serial\n- event_type: dns.domain.exists\n  traits:\n    <<: *dns_domain_traits\n    audit_period_beginning:\n      type: datetime\n      fields: payload.audit_period_beginning\n    audit_period_ending:\n      type: datetime\n      fields: payload.audit_period_ending\n- event_type: trove.*\n  traits: &trove_base_traits\n    instance_type:\n      fields: payload.instance_type\n    user_id:\n      fields: payload.user_id\n    resource_id:\n      fields: payload.instance_id\n    instance_type_id:\n      fields: payload.instance_type_id\n    launched_at:\n      type: datetime\n      fields: payload.launched_at\n    instance_name:\n      fields: payload.instance_name\n    state:\n      fields: payload.state\n    nova_instance_id:\n      fields: payload.nova_instance_id\n    service_id:\n      fields: payload.service_id\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    region:\n      fields: payload.region\n- event_type: ['trove.instance.create', 'trove.instance.modify_volume', 'trove.instance.modify_flavor', 'trove.instance.delete']\n  traits: &trove_common_traits\n    name:\n      fields: payload.name\n    availability_zone:\n      fields: payload.availability_zone\n    instance_size:\n      type: int\n      fields: payload.instance_size\n    volume_size:\n      type: int\n      fields: payload.volume_size\n    nova_volume_id:\n      fields: payload.nova_volume_id\n- event_type: trove.instance.create\n  traits:\n    <<: [*trove_base_traits, *trove_common_traits]\n- event_type: trove.instance.modify_volume\n  traits:\n    <<: [*trove_base_traits, *trove_common_traits]\n    old_volume_size:\n      type: int\n      fields: payload.old_volume_size\n    modify_at:\n      type: datetime\n      fields: payload.modify_at\n- event_type: trove.instance.modify_flavor\n  traits:\n    <<: [*trove_base_traits, *trove_common_traits]\n    old_instance_size:\n      type: int\n      fields: payload.old_instance_size\n    modify_at:\n      type: datetime\n      fields: payload.modify_at\n- event_type: trove.instance.delete\n  traits:\n    <<: [*trove_base_traits, *trove_common_traits]\n    deleted_at:\n      type: datetime\n      fields: payload.deleted_at\n- event_type: trove.instance.exists\n  traits:\n    <<: *trove_base_traits\n    display_name:\n      fields: payload.display_name\n    audit_period_beginning:\n      type: datetime\n      fields: payload.audit_period_beginning\n    audit_period_ending:\n      type: datetime\n      fields: payload.audit_period_ending\n- event_type: profiler.*\n  traits:\n    project:\n      fields: payload.project\n    service:\n      fields: payload.service\n    name:\n      fields: payload.name\n    base_id:\n      fields: payload.base_id\n    trace_id:\n      fields: payload.trace_id\n    parent_id:\n      fields: payload.parent_id\n    timestamp:\n      type: datetime\n      fields: payload.timestamp\n    host:\n      fields: payload.info.host\n    path:\n      fields: payload.info.request.path\n    query:\n      fields: payload.info.request.query\n    method:\n      fields: payload.info.request.method\n    scheme:\n      fields: payload.info.request.scheme\n    db.statement:\n      fields: payload.info.db.statement\n    db.params:\n      fields: payload.info.db.params\n- event_type: 'magnum.cluster.*'\n  traits: &magnum_cluster_crud\n    id:\n      fields: payload.id\n    typeURI:\n      fields: payload.typeURI\n    eventType:\n      fields: payload.eventType\n    eventTime:\n      type: datetime\n      fields: payload.eventTime\n    action:\n      fields: payload.action\n    outcome:\n      fields: payload.outcome\n    initiator_id:\n      fields: payload.initiator.id\n    initiator_typeURI:\n      fields: payload.initiator.typeURI\n    initiator_name:\n      fields: payload.initiator.name\n    initiator_host_agent:\n      fields: payload.initiator.host.agent\n    initiator_host_address:\n      fields: payload.initiator.host.address\n    target_id:\n      fields: payload.target.id\n    target_typeURI:\n      fields: payload.target.typeURI\n    observer_id:\n      fields: payload.observer.id\n    observer_typeURI:\n      fields: payload.observer.typeURI\n- event_type: 'alarm.*'\n  traits:\n    id:\n      fields: payload.alarm_id\n    user_id:\n      fields: payload.user_id\n    project_id:\n      fields: payload.project_id\n    on_behalf_of:\n      fields: payload.on_behalf_of\n    severity:\n      fields: payload.severity\n    detail:\n      fields: payload.detail\n    type:\n      fields: payload.type\n\n")),(0,i.kt)("p",null,"The event_pipeline can be used to filter events and pipeline them to different publishers.\nthe notifier publisher is the message queue broadcasster (RabbitMQ)."),(0,i.kt)("h3",{id:"13-event_pipelineyaml"},"1.3 event_pipeline.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nsources:\n    - name: event_source # 'source name'\n      events:\n          - \"*\" # 'event filter'\n      sinks:\n          - event_sink # 'sink name'\nsinks:\n    - name: event_sink # 'sink name'\n      publishers: # 'list of publishers'\n          - notifier://\n          - http://localhost:8088/post_json\n\n")),(0,i.kt)("p",null,"The pipeline.yaml can be used to filter and pipeline all metrics and events since events send via the notifier also appears in the meters and send them to different publishers."),(0,i.kt)("p",null,"In our case we want to push to the metering api."),(0,i.kt)("h3",{id:"14-pipelineyaml"},"1.4 pipeline.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nsources:\n    - name: meter_source\n      meters:\n          - "*"\n      sinks:\n          - meter_sink\nsinks:\n    - name: meter_sink\n      publishers:\n          - gnocchi://?archive_policy=ceilometer-low&filter_project=service\n          - http://localhost:8088/post_json\n')))}y.isMDXComponent=!0}}]);