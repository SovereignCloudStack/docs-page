"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[531],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var r=i.createContext({}),u=function(e){var t=i.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,r=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(n),m=s,h=p["".concat(r,".").concat(m)]||p[m]||d[m]||o;return n?i.createElement(h,l(l({ref:t},c),{},{components:n})):i.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,l=new Array(o);l[0]=p;var a={};for(var r in t)hasOwnProperty.call(t,r)&&(a[r]=t[r]);a.originalType=e,a.mdxType="string"==typeof e?e:s,l[1]=a;for(var u=2;u<o;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var i=n(7462),s=(n(7294),n(3905));const o={},l="Ansible Style Guide",a={unversionedId:"contribute/styleguides/ansible_styleguide",id:"contribute/styleguides/ansible_styleguide",title:"Ansible Style Guide",description:"We use nearly all default rules of ansible lint. A listing of all these rules can be found in the Ansible Lint documentation:",source:"@site/community/contribute/styleguides/ansible_styleguide.md",sourceDirName:"contribute/styleguides",slug:"/contribute/styleguides/ansible_styleguide",permalink:"/community/contribute/styleguides/ansible_styleguide",draft:!1,tags:[],version:"current",frontMatter:{}},r={},u=[{value:"Task naming",id:"task-naming",level:2},{value:"Key Order",id:"key-order",level:2},{value:"Positioning and use of the become directive",id:"positioning-and-use-of-the-become-directive",level:3},{value:"Position of the when condition",id:"position-of-the-when-condition",level:3},{value:"Usage of collections",id:"usage-of-collections",level:2},{value:"Usage of roles from other collections",id:"usage-of-roles-from-other-collections",level:2},{value:"Parameters that offer lists",id:"parameters-that-offer-lists",level:2},{value:"Usage of changed_when",id:"usage-of-changed_when",level:2},{value:"Disable linting rules",id:"disable-linting-rules",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ansible-style-guide"},"Ansible Style Guide"),(0,s.kt)("p",null,"We use nearly all default rules of ansible lint. A listing of all these rules can be found in the Ansible Lint documentation:\n",(0,s.kt)("a",{parentName:"p",href:"https://ansible.readthedocs.io/projects/lint/rules/"},"https://ansible.readthedocs.io/projects/lint/rules/"),".\nPlease always use the ansible linting to check if the code complies with the default linting rules.\nHowever, since in most cases we always use the latest version of packages and Ansible lint does not provide this, we decided to\ndisable the package_latest rule."),(0,s.kt)("h2",{id:"task-naming"},"Task naming"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Tasks must always have names. The only exception allowed is for forked playbooks."),(0,s.kt)("li",{parentName:"ul"},"A name never starts with a small letter"),(0,s.kt)("li",{parentName:"ul"},"Names are written in present tense"),(0,s.kt)("li",{parentName:"ul"},"No punctuation is used in names")),(0,s.kt)("h2",{id:"key-order"},"Key Order"),(0,s.kt)("p",null,"To check the key order we use our own rule. This can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/osism/zuul-jobs/tree/main/roles/ansible-lint/files"},"here"),"."),(0,s.kt)("h3",{id:"positioning-and-use-of-the-become-directive"},"Positioning and use of the become directive"),(0,s.kt)("p",null,"The become directive is only set when needed and is always set explicitly for each task that needs it."),(0,s.kt)("p",null,"Blocks, roles or playbooks are never executed in a privileged mode."),(0,s.kt)("p",null,"We always insert the become directive between the name of a task and the task itself. This also applies to related directives\nlike ",(0,s.kt)("em",{parentName:"p"},"become_user")," or ",(0,s.kt)("em",{parentName:"p"},"become_flags"),". This is for better visibility if a task is privileged or not."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: Copy hddtemp configuration file\n    become: true\n      ansible.builtin.copy:\n      src: "{{ ansible_os_family }}/hddtemp"\n      dest: "{{ hddtemp_conf_file }}"\n      owner: root\n      group: root\n      mode: 0644\n    notify: Restart hddtemp service\n')),(0,s.kt)("h3",{id:"position-of-the-when-condition"},"Position of the when condition"),(0,s.kt)("p",null,"If you need to use the when condition please add this at the end-section from the task where it is needed. This makes the code\neasier to understand for others. Ansible lint provides the when condition under the task name for blocks. To keep the code clear\nwe decided against it. Please disable this with a noqa if necessary. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: "Archive existing {{ resolvconf_file }} file"\n    become: true\n    ansible.posix.synchronize:\n      src: "/etc/resolv.conf"\n      dest: "/etc/resolv.conf.{{ ansible_date_time.date }}"\n      archive: true\n    delegate_to: "{{ inventory_hostname }}"\n    when: stat_resolvconf_file.stat.islnk is defined and not stat_resolvconf_file.stat.islnk\n')),(0,s.kt)("h2",{id:"usage-of-collections"},"Usage of collections"),(0,s.kt)("p",null,"Collections are always defined as in the following example."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"netbox.netbox")," is here the collection that is used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: Configure netbox manufacturers\n  netbox.netbox.netbox_manufacturer:\n    netbox_url: "{{ netbox_url }}"\n    netbox_token: "{{ netbox_token }}"\n    data:\n      name: "{{ item.value.name }}"\n      slug: "{{ item.value.slug }}"\n      description: "{{ item.value.description | default(\'\') }}"\n    state: present\n  with_dict: "{{ netbox_data_manufacturers }}"\n')),(0,s.kt)("p",null,"Please don\xb4t declare it in this way!:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'collections:\n    - netbox.netbox\n\n  tasks:\n    - name: Manage Discworld site\n      netbox_site:\n        netbox_url: "{{ netbox_url }}"\n        netbox_token: "{{ netbox_token }}"\n        validate_certs: false\n        data:\n          name: Discworld\n          slug: discworld\n        state: present\n')),(0,s.kt)("p",null,"If you have to use collections please define them in a requirements.yml."),(0,s.kt)("p",null,"Example yaml:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"roles:\n  - name: geerlingguy.certbot\n    version: master\n    type: git\n    src: git+https://github.com/geerlingguy/ansible-role-certbot.git\n...\n\ncollections:\n  - name: ansible.netcommon\n    source: https://galaxy.ansible.com\n\n  - name: https://github.com/ansible-collections/ansible.posix.git\n    type: git\n    version: main\n")),(0,s.kt)("h2",{id:"usage-of-roles-from-other-collections"},"Usage of roles from other collections"),(0,s.kt)("p",null,"If you want to reuse roles please do it in the following way:"),(0,s.kt)("p",null,"First you have to declare the role or collection in the requirements.yml like shown in the example before."),(0,s.kt)("p",null,"Than you can use it in playbooks like this"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"  roles:\n    - role: osism.services.auditd\n")),(0,s.kt)("h2",{id:"parameters-that-offer-lists"},"Parameters that offer lists"),(0,s.kt)("p",null,"Parameters that provide a list are always defined as in the following example."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"docker_hosts_defaults")," sets the defaults in the role. Overriding is only possible with the ",(0,s.kt)("strong",{parentName:"p"},"ansible-defaults")," repository."),(0,s.kt)("p",null,"In the configuration repository, docker_hosts_extra is then used to add additional items to the list."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"docker_hosts")," itself is never modified from the outside."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'   docker_hosts_defaults:\n     - "unix:///var/run/docker.sock"\n   docker_hosts_extra: []\n   docker_hosts: "{{ docker_hosts_defaults + docker_hosts_extra }}"\n')),(0,s.kt)("h2",{id:"usage-of-changed_when"},"Usage of changed_when"),(0,s.kt)("p",null,"Please think twice before turning off changed_when. It's a fairly simple yet safety-relevant linting rule and is quite easy to\nimplement."),(0,s.kt)("h2",{id:"disable-linting-rules"},"Disable linting rules"),(0,s.kt)("p",null,"In principle, it is only allowed to disable rules if there is really no other possibility.\nPlease do not disable rules in general but only in individual cases via Noqa. Please use in this case the full rulename and not\nthe numbers, because them are depricated. If it makes sense to ignore a rule, please open up an issue in the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/osism/issues"},"https://github.com/osism/issues")," repository with a label discussion."))}d.isMDXComponent=!0}}]);