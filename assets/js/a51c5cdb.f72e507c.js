"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6002],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>u});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},N=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),N=p(n),u=r,s=N["".concat(o,".").concat(u)]||N[u]||k[u]||l;return n?a.createElement(s,i(i({ref:e},m),{},{components:n})):a.createElement(s,i({ref:e},m))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=N;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d.mdxType="string"==typeof t?t:r,i[1]=d;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},6346:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},i="Configuration",d={unversionedId:"container/components/k8s-cluster-api-provider/doc/configuration",id:"container/components/k8s-cluster-api-provider/doc/configuration",title:"Configuration",description:"Supported k8s versions",source:"@site/docs/03-container/components/k8s-cluster-api-provider/doc/configuration.md",sourceDirName:"03-container/components/k8s-cluster-api-provider/doc",slug:"/container/components/k8s-cluster-api-provider/doc/configuration",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/configuration",draft:!1,editUrl:"https://github.com/SovereignCloudStack/docs-page/tree/main/docs/03-container/components/k8s-cluster-api-provider/doc/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Application Credentials",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/application-credentials"},next:{title:"Maintenance and Troubleshooting Guide for SCS k8s-cluster-api-provider",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/Maintenance_and_Troubleshooting"}},o={},p=[{value:"Supported k8s versions",id:"supported-k8s-versions",level:2},{value:"Overview over the parameters in clusterctl.yaml and environment-XXX.tfvars",id:"overview-over-the-parameters-in-clusterctlyaml-and-environment-xxxtfvars",level:2},{value:"Parameters CAPI management server",id:"parameters-capi-management-server",level:3},{value:"Common parameters management server and clusters",id:"common-parameters-management-server-and-clusters",level:3},{value:"Parameters clusters",id:"parameters-clusters",level:3}],m={toc:p};function k(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("h2",{id:"supported-k8s-versions"},"Supported k8s versions"),(0,r.kt)("p",null,"As of R4, our tests cover 1.22.latest ... 1.26.latest.\nAll of them pass the sonobuoy CNCF conformance tests."),(0,r.kt)("h2",{id:"overview-over-the-parameters-in-clusterctlyaml-and-environment-xxxtfvars"},"Overview over the parameters in clusterctl.yaml and environment-XXX.tfvars"),(0,r.kt)("p",null,"The provenance capo means that this setting comes from the templates used by\nthe cluster-api-provider-openstack, while SCS denotes that this setting has\nbeen added by the SCS project."),(0,r.kt)("h3",{id:"parameters-capi-management-server"},"Parameters CAPI management server"),(0,r.kt)("p",null,"Parameters controlling the Cluster-API management server (capi management server) creation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"environment"),(0,r.kt)("th",{parentName:"tr",align:null},"clusterctl.yaml"),(0,r.kt)("th",{parentName:"tr",align:null},"provenance"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"capi")),(0,r.kt)("td",{parentName:"tr",align:null},"Prefix used for OpenStack resources for the capi mgmt node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kind_flavor")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SCS-2V-4")),(0,r.kt)("td",{parentName:"tr",align:null},"Flavor to be used for the k8s capi mgmt server")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ubuntu 22.04")),(0,r.kt)("td",{parentName:"tr",align:null},"Image for the capi mgmt server. Use ",(0,r.kt)("inlineCode",{parentName:"td"},"Ubuntu 22.04")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Debian 12"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ssh_username")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ubuntu")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the default user for the ",(0,r.kt)("inlineCode",{parentName:"td"},"image"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"clusterapi_version")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.3.8")),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the cluster-API incl. ",(0,r.kt)("inlineCode",{parentName:"td"},"clusterctl"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"capi_openstack_version")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.7.3")),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the cluster-api-provider-openstack (needs to fit the CAPI version)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cilium_binaries")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"v0.15.0;v0.11.6")),(0,r.kt)("td",{parentName:"tr",align:null},"Versions of the cilium and hubble CLI in the vA.B.C;vX.Y.Z format")))),(0,r.kt)("h3",{id:"common-parameters-management-server-and-clusters"},"Common parameters management server and clusters"),(0,r.kt)("p",null,"Parameters controlling both management server creation and cluster creation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"environment"),(0,r.kt)("th",{parentName:"tr",align:null},"clusterctl.yaml"),(0,r.kt)("th",{parentName:"tr",align:null},"provenance"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cloud_provider")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_CLOUD")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OS_CLOUD")," name in clouds.yaml")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"external")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_EXTERNAL_NETWORK_ID")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},'Name/ID of the external (public) OpenStack network, default "" uses the detected external network')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dns_nameservers")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_DNS_NAMESERVERS")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'[ "5.1.66.255", "185.150.99.255" ]')),(0,r.kt)("td",{parentName:"tr",align:null},"Array of nameservers for capi mgmt server and for cluster nodes, replace the FF MUC defaults with local servers if available")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"availability_zone")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_FAILURE_DOMAIN")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Availability Zone(s) for the mgmt node / workload clusters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kind_mtu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MTU_VALUE")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"MTU for the mgmt server; Calico is set 50 bytes smaller; 0 means autodetection")))),(0,r.kt)("h3",{id:"parameters-clusters"},"Parameters clusters"),(0,r.kt)("p",null,"Parameters controlling the cluster creation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"environment"),(0,r.kt)("th",{parentName:"tr",align:null},"clusterctl.yaml"),(0,r.kt)("th",{parentName:"tr",align:null},"provenance"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"node_cidr")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NODE_CIDR")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"10.8.0.0/20")),(0,r.kt)("td",{parentName:"tr",align:null},"IPv4 address range (CIDR notation) for workload nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pod_cidr")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"POD_CIDR")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"192.168.0.0/16")),(0,r.kt)("td",{parentName:"tr",align:null},"IPv4 address range (CIDR notation) for pods")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service_cidr")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SERVICE_CIDR")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"10.96.0.0/12")),(0,r.kt)("td",{parentName:"tr",align:null},"IPv4 address range (CIDR notation) for services")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"use_cilium")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"USE_CILIUM")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Use cilium as CNI instead of calico, it can be set to vX.Y.Z and ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," results in ",(0,r.kt)("inlineCode",{parentName:"td"},"v1.13.x"),", also see ",(0,r.kt)("inlineCode",{parentName:"td"},"cilium_binaries"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"calico_version")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CALICO_VERSION")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"v3.25.1")),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the Calico CNI provider (ignored if ",(0,r.kt)("inlineCode",{parentName:"td"},"use_cilium")," is set)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes_version")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KUBERNETES_VERSION")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"v1.25.x")),(0,r.kt)("td",{parentName:"tr",align:null},"Kubernetes version deployed into workload cluster (",(0,r.kt)("inlineCode",{parentName:"td"},".x")," means latest patch release)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_IMAGE_NAME")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ubuntu-capi-image-${KUBERNETES_VERION}")),(0,r.kt)("td",{parentName:"tr",align:null},"Image name for k8s controller and worker nodes. Ubuntu 22.04 image is used for k8s versions >= 1.27.3, 1.26.6, 1.25.11, Ubuntu 20.04 otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kube_image_raw")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_IMAGE_RAW")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Register images in raw format (instead of qcow2), good for ceph COW")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image_registration_extra_flags")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_IMAGE_REGISTATION_EXTRA_FLAGS")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},"Extra flags passed during image registration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_CONTROL_PLANE_IP")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"127.0.0.1")),(0,r.kt)("td",{parentName:"tr",align:null},"Use localhost to talk to capi cluster (don't change this!)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_SSH_KEY_NAME")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${prefix}-keypair")),(0,r.kt)("td",{parentName:"tr",align:null},"SSH key name generated and used to connect to workload cluster nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"controller_flavor")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SCS-2V-4-20s")),(0,r.kt)("td",{parentName:"tr",align:null},"Flavor to be used for control plane nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"worker_flavor")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_NODE_MACHINE_FLAVOR")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SCS-2V-4-20s")),(0,r.kt)("td",{parentName:"tr",align:null},"Flavor to be used for worker nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"controller_count")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CONTROL_PLANE_MACHINE_COUNT")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of control plane nodes in testcluster (0 skips testcluster creation)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CONTROL_PLANE_MACHINE_GEN")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"genc01")),(0,r.kt)("td",{parentName:"tr",align:null},"Suffix for control plane node resources, to be changed for rolling upgrades")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"worker_count")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WORKER_MACHINE_COUNT")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of worker nodes in testcluster")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WORKER_MACHINE_GEN")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"genw01")),(0,r.kt)("td",{parentName:"tr",align:null},"Suffix for worker node resources, to be changed for rolling upgrades")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CONTROL_PLANE_ROOT_DISKSIZE")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"If")," diskless flavors are used for control plane nodes, this is the allocated root volume disk size (in GB)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WORKER_ROOT_DISKSIZE")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"If")," diskless flavors are used for worker nodes, this is the allocated root volume disk size (in GB)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"anti_affinity")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_ANTI_AFFINITY")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Use anti-affinity server groups to prevent k8s nodes on same host (soft for workers, hard for controllers)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_SRVGRP_CONTROLLER")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nonono")),(0,r.kt)("td",{parentName:"tr",align:null},"Autogenerated if ",(0,r.kt)("inlineCode",{parentName:"td"},"anti_affinity")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", eliminated otherwise")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OPENSTACK_SRVGRP_WORKER")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nonono")),(0,r.kt)("td",{parentName:"tr",align:null},"Autogenerated if ",(0,r.kt)("inlineCode",{parentName:"td"},"anti_affinity")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", eliminated otherwise")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_occm")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_OCCM")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy the given version of OCCM into the cluster. ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," (default) chooses the latest version matching the k8s version. You can specify ",(0,r.kt)("inlineCode",{parentName:"td"},"master")," to chose the upstream master branch. Don't disable this.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_cindercsi")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_CINDERCSI")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy the given (or latest matching for the default true value) of cinder CSI.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"etcd_unsafe_fs")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ETCD_UNSAFE_FS")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Use ",(0,r.kt)("inlineCode",{parentName:"td"},"barrier=0")," for filesystem on control nodes to avoid storage latency. Use for multi-controller clusters on slow/networked storage, otherwise not recommended.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"testcluster_name")),(0,r.kt)("td",{parentName:"tr",align:null},"(cmd line)"),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"testcluster")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows setting the default cluster name, created at bootstrap (if ",(0,r.kt)("inlineCode",{parentName:"td"},"controller_count")," is larger than 0)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"restrict_kubeapi")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RESTRICT_KUBEAPI")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[ ]")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows restricting access to kubernetes API by list of CIDRs. Empty list (default) means public, ",(0,r.kt)("inlineCode",{parentName:"td"},'[ "none" ]')," means internal access only.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"capo_instance_create_timeout")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CLUSTER_API_OPENSTACK_INSTANCE_CREATE_TIMEOUT")),(0,r.kt)("td",{parentName:"tr",align:null},"capo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5")),(0,r.kt)("td",{parentName:"tr",align:null},"Time to wait for an OpenStack machine to be created (in minutes)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"containerd_registry_files")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"hosts":["./files/containerd/docker.io"], "certs":[]}')),(0,r.kt)("td",{parentName:"tr",align:null},"Containerd registry hosts config files, see related ",(0,r.kt)("a",{parentName:"td",href:"/docs/container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration"},"docs")," for details.")))),(0,r.kt)("p",null,"Optional services deployed to cluster:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"environment"),(0,r.kt)("th",{parentName:"tr",align:null},"clusterctl.yaml"),(0,r.kt)("th",{parentName:"tr",align:null},"provenance"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"script"),(0,r.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_metrics")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_METRICS")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply_metrics.sh")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy metrics service to nodes to make ",(0,r.kt)("inlineCode",{parentName:"td"},"kubectl top")," work")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_nginx_ingress")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_NGINX_INGRESS")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply_nginx_ingress.sh")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy NGINX ingress controller (this spawns an OpenStack Loadbalancer), pass version to explicitly choose the version, ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," results in ",(0,r.kt)("inlineCode",{parentName:"td"},"v1.8.0")," (supported k8s >= 1.24)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_gateway_api")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_GATEWAY_API")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create_cluster.sh")),(0,r.kt)("td",{parentName:"tr",align:null},'Deploy Gateway APIs CRDs and enable ciliums Gateway API implementation. This only works in conjunction with USE_CILIUM=true. Also this will break at least one CNCF conformance test. This feature is considered a tech-review. Keep in mind that Gateway API itself is under development and not GA. Also note that ciliums implementation of Gateway API is considered "beta".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"``"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NGINX_INGRESS_PROXY")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"(dito)"),(0,r.kt)("td",{parentName:"tr",align:null},"Configure LB and nginx to get real IP via PROXY protocol; trouble for pod to LB connections has been resolved by setting hostname")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"use_ovn_lb_provider")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"USE_OVN_LB_PROVIDER")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply_nginx_ingress.sh")),(0,r.kt)("td",{parentName:"tr",align:null},"Clouds using OVN networking can deploy the OVN provider that has low overhead (L3) and makes real client IPs visible without proxy protocol hacks. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"auto")," to enable; not yet ready for prime time, thus defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_cert_manager")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_CERT_MANAGER")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply_cert_manager.sh")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy cert-manager, pass version (e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"v1.12.2"),") to explicitly choose a version")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_flux")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DEPLOY_FLUX")),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy flux2 into the cluster")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_harbor")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deploy_harbor.sh")),(0,r.kt)("td",{parentName:"tr",align:null},"Deploy harbor into the cluster. When enabled, it will overwrite the settings above. Harbor forces deployment of ",(0,r.kt)("inlineCode",{parentName:"td"},"flux")," and based on config, it can force deployment of other dependencies (",(0,r.kt)("inlineCode",{parentName:"td"},"cert-manager"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ingress-nginx")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"Cinder CSI"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"harbor_config")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"SCS"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{domain_name:"", issuer_email:"", persistence:false, database_size:"1Gi", redis_size:"1Gi", trivy_size:"5Gi"}')),(0,r.kt)("td",{parentName:"tr",align:null},"(dito)"),(0,r.kt)("td",{parentName:"tr",align:null},"Harbor container registry configuration options, see related ",(0,r.kt)("a",{parentName:"td",href:"/docs/container/components/k8s-cluster-api-provider/doc/usage/harbor"},"docs")," for details.")))))}k.isMDXComponent=!0}}]);